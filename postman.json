{
  "info": {
    "name": "User Management API",
    "description": "Complete user management API with JWT authentication",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{jwt_token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Auto-set base URL if not set",
          "if (!pm.variables.get('base_url')) {",
          "    pm.variables.set('base_url', 'http://localhost:3000');",
          "}"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "jwt_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "user_id",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register User",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const user = pm.response.json();",
                  "    pm.collectionVariables.set('user_id', user.id);",
                  "    pm.test('User registered successfully', function () {",
                  "        pm.expect(user.email).to.exist;",
                  "        pm.expect(user.display_name).to.exist;",
                  "        pm.expect(user.id).to.exist;",
                  "    });",
                  "} else {",
                  "    pm.test('Registration failed', function () {",
                  "        pm.expect(pm.response.code).to.be.oneOf([400, 409]);",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"password123\",\n  \"display_name\": \"John Doe\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/register",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "register"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('jwt_token', response.token);",
                  "    pm.collectionVariables.set('user_id', response.user.id);",
                  "    ",
                  "    pm.test('Login successful', function () {",
                  "        pm.expect(response.token).to.exist;",
                  "        pm.expect(response.user).to.exist;",
                  "        pm.expect(response.expires_at).to.exist;",
                  "    });",
                  "    ",
                  "    pm.test('Token is valid JWT format', function () {",
                  "        const token = response.token;",
                  "        const parts = token.split('.');",
                  "        pm.expect(parts).to.have.lengthOf(3);",
                  "    });",
                  "} else {",
                  "    pm.test('Login failed', function () {",
                  "        pm.expect(pm.response.code).to.be.oneOf([401, 404]);",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/login",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "login"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "User Management",
      "item": [
        {
          "name": "Get Current User (Me)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const user = pm.response.json();",
                  "    pm.test('User profile retrieved', function () {",
                  "        pm.expect(user.id).to.exist;",
                  "        pm.expect(user.email).to.exist;",
                  "        pm.expect(user.display_name).to.exist;",
                  "        pm.expect(user.created_at).to.exist;",
                  "        pm.expect(user.updated_at).to.exist;",
                  "    });",
                  "} else if (pm.response.code === 401) {",
                  "    pm.test('Authentication required', function () {",
                  "        pm.expect(pm.response.json().error).to.include('token');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/me",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "me"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get User by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const user = pm.response.json();",
                  "    pm.test('User retrieved by ID', function () {",
                  "        pm.expect(user.id).to.exist;",
                  "        pm.expect(user.email).to.exist;",
                  "        pm.expect(user.display_name).to.exist;",
                  "    });",
                  "} else if (pm.response.code === 404) {",
                  "    pm.test('User not found', function () {",
                  "        pm.expect(pm.response.json().error).to.include('not found');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/users/{{user_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                "{{user_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update User Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const user = pm.response.json();",
                  "    pm.test('User profile updated', function () {",
                  "        pm.expect(user.display_name).to.equal('John Doe Updated');",
                  "        pm.expect(user.updated_at).to.exist;",
                  "    });",
                  "} else if (pm.response.code === 401) {",
                  "    pm.test('Unauthorized update attempt', function () {",
                  "        pm.expect(pm.response.json().error).to.exist;",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"display_name\": \"John Doe Updated\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/{{user_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                "{{user_id}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Error Testing",
      "item": [
        {
          "name": "Unauthorized Request",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Unauthorized request blocked', function () {",
                  "    pm.expect(pm.response.code).to.equal(401);",
                  "    pm.expect(pm.response.json().error).to.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/me",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "me"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Invalid Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Invalid token rejected', function () {",
                  "    pm.expect(pm.response.code).to.equal(401);",
                  "    pm.expect(pm.response.json().error).to.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer invalid-token-here"
              }
            ],
            "url": {
              "raw": "{{base_url}}/me",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "me"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Duplicate Email Registration",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Duplicate email rejected', function () {",
                  "    pm.expect(pm.response.code).to.equal(409);",
                  "    pm.expect(pm.response.json().error).to.include('already exists');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"password123\",\n  \"display_name\": \"Another John\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/register",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "register"
              ]
            }
          },
          "response": []
        }
      ]
    }
  ]
}